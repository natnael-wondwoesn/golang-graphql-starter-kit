package auth

import (
	"errors"
	"fmt"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"{{ .Config.ProjectName }}/config"
	"{{ .Config.ProjectName }}/internal/models"
)

type JWTService struct {
	secretKey     string
	tokenDuration time.Duration
}

func NewJWTService(cfg *config.Config) *JWTService {
	return &JWTService{
		secretKey:     cfg.JWT.Secret,
		tokenDuration: time.Duration(cfg.JWT.Expiration) * time.Hour,
	}
}

type UserClaims struct {
{{if eq .Config.Database "PostgreSQL" "MySQL" "SQLite"}}
  {{if eq .Config.ORM "GORM"}}
	UserID uint   `json:"user_id"`
  {{else if eq .Config.ORM "SQLC"}}
	UserID int64  `json:"user_id"`
  {{end}}
{{else if eq .Config.Database "MongoDB"}}
	UserID string `json:"user_id"`
{{end}}
	Email  string `json:"email"`
	Role   string `json:"role"`
	jwt.RegisteredClaims
}

// GenerateToken creates a new JWT token for a user
func (j *JWTService) GenerateToken(user *models.User) (string, error) {
	claims := UserClaims{
{{if eq .Config.Database "PostgreSQL" "MySQL" "SQLite"}}
  {{if eq .Config.ORM "GORM"}}
	UserID: user.ID,
  {{else if eq .Config.ORM "SQLC"}}
	UserID: user.ID,
  {{end}}
{{else if eq .Config.Database "MongoDB"}}
	UserID: user.ID.Hex(),
{{end}}
		Email:  user.Email,
		Role:   user.Role,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(j.tokenDuration)),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
			NotBefore: jwt.NewNumericDate(time.Now()),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(j.secretKey))
}

// ValidateToken checks if the token is valid and returns the claims
func (j *JWTService) ValidateToken(tokenString string) (*UserClaims, error) {
	token, err := jwt.ParseWithClaims(
		tokenString,
		&UserClaims{},
		func(token *jwt.Token) (interface{}, error) {
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
			}
			return []byte(j.secretKey), nil
		},
	)

	if err != nil {
		return nil, err
	}

	claims, ok := token.Claims.(*UserClaims)
	if !ok || !token.Valid {
		return nil, errors.New("invalid token")
	}

	return claims, nil
}