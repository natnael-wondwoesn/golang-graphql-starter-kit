scalar Time

type User {
  id: ID!
  email: String!
  name: String
  role: String!
  createdAt: Time!
  updatedAt: Time!
}

{{if ne .Config.Auth "None"}}
type AuthResponse {
  token: String!
  user: User!
}

input NewUser {
  email: String!
  password: String!
  name: String
}

input Login {
  email: String!
  password: String!
}
{{end}}

type Query {
  # User queries
  users: [User!]!
  user(id: ID!): User
{{if ne .Config.Auth "None"}}
  me: User
{{end}}
}

type Mutation {
{{if ne .Config.Auth "None"}}
  # Auth mutations
  createUser(input: NewUser!): User!
  login(input: Login!): AuthResponse!
{{else}}
  # User mutations
  createUser(email: String!, name: String): User!
{{end}}
  updateUser(id: ID!, name: String): User!
  deleteUser(id: ID!): Boolean!
}

{{if (HasFeature "WebSocket Subscriptions")}}
type Subscription {
  # Subscriptions for real-time updates
  userCreated: User!
  userUpdated: User!
}
{{end}}